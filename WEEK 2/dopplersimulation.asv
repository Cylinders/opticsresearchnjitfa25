% System spec -------------------------------------------
velocity = 0.3;
wavelength = 850e-9;
waveNumber = (2 * pi) / wavelength;
fs = (3e7) / wavelength; % Sampling frequency (Hz)
   
% Dependent Variables ------------------------------------
T = 1e-5; % Total sampling time duration (seconds)
dt = 1e-9;
%r = 0:0.00001:0.1;
r = 0; % fixed
t = 0:dt:T;
%t = 0; % fixed
% Noise ---------------------------------------------
noise_amplitude = 1e-3; % Adjust for desired noise strength
continuous_amp_noise = noise_amplitude * randn(size(t));
noiseZ_mag = 1e-10; %1e-10
continuous_Z_noise = noiseZ_mag * randn(size(t));
% Amplitude --------------------------------------------
I0 = 2;
absorbtion_u = 5;
amp0 = @(r) I0 * exp(-absorbtion_u * r);
ampT = @(r) amp0(r) + continuous_amp_noise;

motionType = 'quadratic';
Z0 = 0
switch motionType
    case 'linear'
        Z = @(t) Z0 + velocity*t;

    case 'quadratic'
        % Degree 2 polynomial
        Z = @(t) Z0 + 50 * (velocity/(2*T^(1))) * t.^2;
        
    case 'cubic'
        % Degree 3 polynomial
        Z = @(t) Z0 + 25*(velocity/(3*T^(2))) * t.^3;
        
    case 'quartic'
        % Degree 4 polynomial
        Z = @(t) Z0 + 10*(velocity/(4*T^(3))) * t.^4;
        
    case 'quintic'
        % Degree 5 polynomial
        Z = @(t) Z0 + 10*(velocity/(5*T^(4))) * t.^5;
    case 'sinusoidal'
        % z(t) = A sin(ωt), choose ω and A so max vel ≈ velocity
        f = 1e5; % Hz
        A = velocity/(2*pi*f); 
        Z = @(t) Z0 + A*sin(2*pi*f*t);

    case 'sawtooth'
        % Proper sawtooth: linear rise, sharp drop
        f = 1e6; % Hz
        A = velocity/(2*pi*f);
        Z = @(t) Z0 + A*sawtooth(2*pi*f*t); % width=1 → classic sawtooth

    case 'pulse'
        f = 1e5;
        A = velocity/(2*pi*f);
        Z = @(t) Z0 + A*square(2*pi*f*t);

    case 'ramp'
        % Symmetric triangular wave
        f = 1e6;
        A = velocity/(2*pi*f);
        Z = @(t) Z0 + A*sawtooth(2*pi*f*t); % width=0.5 → triangle
end

position = @(t) Z(t) + continuous_Z_noise;

% Signal -----------------------------------------------
signal = ampT(r) .* (exp(1i*waveNumber*position(t)));



pulse_train = 1 * (mod(0:dt:T, 2) <= 1e-5);



% convSignal = conv(signal, pulse_train, 'same')
rectWindow = ones(T/dt +)
convSignal = ifft(fft(signal) .* sinc(t));



 
% Extract real, imaginary, and phase components
phase_info = imag(convSignal);
intensity_info = real(convSignal);
phase = angle(convSignal);

dPdt = gradient(phase, dt);
velocity_calc = dPdt / waveNumber;

% Assuming original signal variables exist:
% signal, position(t), etc.
orig_phase_info = imag(signal);
orig_intensity_info = real(signal);
orig_phase = angle(signal);
orig_dPdt = gradient(orig_phase, dt);
orig_velocity_calc = orig_dPdt / waveNumber;

% -------------------- PLOTTING --------------------
figure;
sgtitle('Signal Comparison: Original vs Convolved');
grid on;
hold on;

% ------------------ 1. Position vs. Time -------------------
subplot(4,2,1); % Row 1, Col 1
plot(t, position(t), 'b');
title(['Position vs. Time (' motionType ')']);
xlabel('Time (s)');
ylabel('Position');
xlim([0 T]);

% ------------------ 2. Position (duplicate for alignment) --
subplot(4,2,2); % Row 1, Col 2
plot(t, position(t), 'b');
title(['Position vs. Time (' motionType ')']);
xlabel('Time (s)');
ylabel('Position');
xlim([0 T]);

% ------------------ 3. Original Signal ---------------------
subplot(4,2,3); % Row 2, Col 1
plot(t, orig_intensity_info);
title('Original Signal vs. Time');
xlabel('Time (s)');
ylabel('Signal');

% ------------------ 4. Convolved Signal --------------------
subplot(4,2,4); % Row 2, Col 2
plot(t, intensity_info);
title('Convolved Signal vs. Time');
xlabel('Time (s)');
ylabel('Signal');

% ------------------ 5. Original Phase ----------------------
subplot(4,2,5); % Row 3, Col 1
plot(t, orig_phase);
title('Original Phase vs. Time');
xlabel('Time (s)');
ylabel('Phase');

% ------------------ 6. Convolved Phase ---------------------
subplot(4,2,6); % Row 3, Col 2
plot(t, phase);
title('Convolved Phase vs. Time');
xlabel('Time (s)');
ylabel('Phase');

% ------------------ 7. Original Velocity -------------------
subplot(4,2,7); % Row 4, Col 1
plot(t, orig_velocity_calc);
title('Original Velocity vs. Time');
xlabel('Time (s)');
ylabel('Velocity');
ylim([-velocity*6 velocity*6]);

% ------------------ 8. Convolved Velocity ------------------
subplot(4,2,8); % Row 4, Col 2
plot(t, velocity_calc);
title('Convolved Velocity vs. Time');
xlabel('Time (s)');
ylabel('Velocity');
ylim([-velocity*6 velocity*6]);


% ------------------ Optional Formatting -------------------
sgtitle('Motion and Signal Analysis'); % Add a global title for all subplots