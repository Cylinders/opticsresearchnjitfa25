% System spec -------------------------------------------
velocity = 0.3;
wavelength = 850e-9;
waveNumber = (2 * pi) / wavelength;
fs = (3e8) / wavelength; % Sampling frequency (Hz)
   
% Dependent Variables ------------------------------------
T = 1e-5; % Total sampling time duration (seconds)
dt = 1e-9;
%r = 0:0.00001:0.1;
r = 0; % fixed
t = 0:dt:T;
%t = 0; % fixed
% Noise ---------------------------------------------
noise_amplitude = 1e-3; % Adjust for desired noise strength
continuous_amp_noise = noise_amplitude * randn(size(t));
noiseZ_mag = 1e-10; %1e-10
continuous_Z_noise = noiseZ_mag * randn(size(t));
% Amplitude --------------------------------------------
I0 = 2;
absorbtion_u = 5;
amp0 = @(r) I0 * exp(-absorbtion_u * r);
ampT = @(r) amp0(r) + continuous_amp_noise;
% Linear Motion -----------------------------------------
motionType = 'linear'; % options: 'linear','poly','sinusoidal','sawtooth','pulse','ramp'

switch motionType
    case 'linear'
        Z = @(t) Z0 + velocity*t;

    case 'poly'
        % Quadratic with scaled coefficient so max vel ~ velocity
        Z = @(t) Z0 + (velocity/(T))*t.^2;  

    case 'sinusoidal'
        % z(t) = A sin(ωt), choose ω and A so max vel ≈ velocity
        f = 1e5; % Hz, adjust frequency
        A = velocity/(2*pi*f); 
        Z = @(t) Z0 + A*sin(2*pi*f*t);

    case 'sawtooth'
        f = 1e5;
        A = velocity/(2*pi*f);
        Z = @(t) Z0 + A*sawtooth(2*pi*f*t);

    case 'pulse'
        f = 1e5;
        A = velocity/(2*pi*f);
        Z = @(t) Z0 + A*square(2*pi*f*t);

    case 'ramp'
        % Triangular wave, slope adjusted to match velocity
        f = 1e5;
        A = velocity/(2*pi*f);
        Z = @(t) Z0 + A*abs(sawtooth(2*pi*f*t));
end

linearZ = @(t) Z(t) + continuous_Z_noise;


% Signal -----------------------------------------------
signal = ampT(r) .* (exp(1i*waveNumber*linearZ(t)));
phase_info = imag(signal);
intensity_info = real(signal);
phase = angle(signal);
dPdt = gradient(phase) ./ gradient(t);
velocity_calc = dPdt / waveNumber;
% Plots -----------------------------------------------
grid on;
hold on;

% ---------------------- Position Info 



% ---------------------- Signal Info -----------------

%{
title('Signal vs. time');
xlabel('time(s)');
ylabel('Signal');
%plot(t, intensity_info);
%plot(t, phase_info);
%}

% ---------------------- Phase change ----------------
%{
title('Phase vs. time');
xlabel('time(s)');
ylabel('Phase');
plot (t, angle(signal));
%}
% ----------------------Velocity calculation ----------
%{
title('Velocity vs. time');
xlabel('time(s)');
ylabel('Velocity');
ylim([-velocity*6 velocity*6])
plot(t, velocity_calc);
%}
